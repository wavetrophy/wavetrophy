security:
  encoders:
    FOS\UserBundle\Model\UserInterface: bcrypt
    Symfony\Component\Security\Core\User\User: bcrypt

  role_hierarchy:
    ROLE_ADMIN:       ROLE_USER
    ROLE_SUPER_ADMIN: ROLE_ADMIN

  providers:
    fos_userbundle:
      id: App\Provider\UserProvider
    in_memory:
      memory:
        users:
          docs: { password: '$2y$10$vsJG..u78ZQeO1KQv0iqC.Hlc2MK3uxHBCy8vuAtkJc6ZzcP7NOSu', roles: ['ROLE_DOCS'] }

  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false
      anonymous: true

    auth_login:
      pattern:  ^/auth
      stateless: true
      anonymous: true

      form_login:
        check_path:                     /auth/login_check
        success_handler:                lexik_jwt_authentication.handler.authentication_success
        failure_handler:                lexik_jwt_authentication.handler.authentication_failure
        require_previous_session:       false
        always_use_default_target_path: true
        default_target_path:            easyadmin
        use_referer:                    true
        provider:                       fos_userbundle

      json_login:
        check_path:      /auth/login
        username_path:   username
        password_path:   password
        success_handler: lexik_jwt_authentication.handler.authentication_success
        failure_handler: lexik_jwt_authentication.handler.authentication_failure
        provider:        fos_userbundle



    api_docs:
      pattern:    ^/api/docs
      stateless:  true
      anonymous:  true
      http_basic:
        realm: 'Secured area'
        provider: in_memory

    api:
      pattern:    ^/api
      stateless:  true
      anonymous:  true
      provider:   fos_userbundle
      guard:
        authenticators:
          - lexik_jwt_authentication.jwt_token_authenticator

    main:
      pattern: ^/
      anonymous: true
      form_login:
        provider: fos_userbundle
        csrf_token_generator: security.csrf.token_manager
      logout: true

  access_control:
    - { requires_channel: https, path: ^/login, role: IS_AUTHENTICATED_ANONYMOUSLY }
    - { requires_channel: https, path: ^/auth, role: IS_AUTHENTICATED_ANONYMOUSLY }
    - { requires_channel: https, path: ^/api, role: IS_AUTHENTICATED_FULLY }
    - { requires_channel: https, path: ^/api/docs$, role: ROLE_DOCS }
    - { requires_channel: https, path: ^/admin, role: ROLE_ADMIN }
    - { requires_channel: https, path: ^/mailer, role: ROLE_ADMIN }
    - { requires_channel: https, path: ^/, role: IS_AUTHENTICATED_FULLY }
    - { requires_channel: https, path: ^/$, role: IS_AUTHENTICATED_ANONYMOUSLY }
